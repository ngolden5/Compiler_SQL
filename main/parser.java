
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import sql.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\005\004\000\002\002\004\000\002\006" +
    "\007\000\002\010\003\000\002\010\003\000\002\012\005" +
    "\000\002\012\003\000\002\020\003\000\002\020\005\000" +
    "\002\014\004\000\002\013\005\000\002\013\003\000\002" +
    "\021\003\000\002\021\004\000\002\025\003\000\002\026" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\004" +
    "\000\002\017\005\000\002\017\003\000\002\002\003\000" +
    "\002\002\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\023\003" +
    "\000\002\023\003\000\002\022\005\000\002\022\003\000" +
    "\002\022\005\000\002\004\007\000\002\007\006\000\002" +
    "\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\004\006\001\002\000\004\002\105\001" +
    "\002\000\004\014\104\001\002\000\006\005\007\022\uffdb" +
    "\001\002\000\004\022\ufffd\001\002\000\004\022\013\001" +
    "\002\000\004\022\ufffe\001\002\000\006\006\020\015\017" +
    "\001\002\000\032\006\ufffa\010\ufffa\011\ufffa\014\ufffa\015" +
    "\ufffa\016\015\020\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\001\002\000\006\006\ufffb\015\ufffb\001\002\000" +
    "\004\022\016\001\002\000\030\006\ufff9\010\ufff9\011\ufff9" +
    "\014\ufff9\015\ufff9\020\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\001\002\000\004\022\013\001\002\000\004" +
    "\022\074\001\002\000\010\007\023\014\uffdb\020\uffdb\001" +
    "\002\000\006\014\ufff0\020\ufff0\001\002\000\014\012\036" +
    "\013\032\021\027\022\013\023\040\001\002\000\006\014" +
    "\ufff1\020\ufff1\001\002\000\006\014\uffff\020\uffff\001\002" +
    "\000\010\011\uffec\014\uffec\020\uffec\001\002\000\004\022" +
    "\071\001\002\000\024\010\uffe1\011\uffe1\014\uffe1\020\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002\000" +
    "\010\011\uffe9\014\uffe9\020\uffe9\001\002\000\004\017\066" +
    "\001\002\000\010\011\uffe8\014\uffe8\020\uffe8\001\002\000" +
    "\016\010\050\024\052\025\054\026\051\027\053\030\055" +
    "\001\002\000\010\011\uffea\014\uffea\020\uffea\001\002\000" +
    "\012\013\032\021\027\022\013\023\040\001\002\000\024" +
    "\010\uffe2\011\uffe2\014\uffe2\020\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\001\002\000\026\010\uffdf\011\uffdf" +
    "\014\uffdf\016\045\020\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\001\002\000\010\011\uffed\014\uffed\020\uffed" +
    "\001\002\000\010\011\043\014\uffef\020\uffef\001\002\000" +
    "\014\012\036\013\032\021\027\022\013\023\040\001\002" +
    "\000\010\011\uffee\014\uffee\020\uffee\001\002\000\004\023" +
    "\046\001\002\000\024\010\uffde\011\uffde\014\uffde\020\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\001\002\000" +
    "\010\011\uffeb\014\uffeb\020\uffeb\001\002\000\004\017\063" +
    "\001\002\000\010\021\027\022\013\023\040\001\002\000" +
    "\010\021\027\022\013\023\040\001\002\000\010\021\027" +
    "\022\013\023\040\001\002\000\010\021\027\022\013\023" +
    "\040\001\002\000\010\021\027\022\013\023\040\001\002" +
    "\000\010\011\uffe3\014\uffe3\020\uffe3\001\002\000\010\011" +
    "\uffe6\014\uffe6\020\uffe6\001\002\000\010\011\uffe4\014\uffe4" +
    "\020\uffe4\001\002\000\010\011\uffe7\014\uffe7\020\uffe7\001" +
    "\002\000\010\011\uffe5\014\uffe5\020\uffe5\001\002\000\004" +
    "\004\006\001\002\000\004\020\065\001\002\000\010\011" +
    "\uffdd\014\uffdd\020\uffdd\001\002\000\004\004\006\001\002" +
    "\000\004\020\070\001\002\000\010\011\uffdc\014\uffdc\020" +
    "\uffdc\001\002\000\004\021\072\001\002\000\024\010\uffe0" +
    "\011\uffe0\014\uffe0\020\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\001\002\000\014\007\ufff5\014\ufff5\015\ufff5" +
    "\020\ufff5\022\102\001\002\000\014\007\ufff3\014\ufff3\015" +
    "\ufff3\020\ufff3\022\ufff3\001\002\000\012\007\ufff6\014\ufff6" +
    "\015\ufff6\020\ufff6\001\002\000\012\007\ufff8\014\ufff8\015" +
    "\077\020\ufff8\001\002\000\004\022\074\001\002\000\012" +
    "\007\ufff7\014\ufff7\015\ufff7\020\ufff7\001\002\000\012\007" +
    "\ufff4\014\ufff4\015\ufff4\020\ufff4\001\002\000\012\007\ufff2" +
    "\014\ufff2\015\ufff2\020\ufff2\001\002\000\006\006\ufffc\015" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\005\003\006\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\007\011\010\001\001" +
    "\000\002\001\001\000\006\012\011\020\013\001\001\000" +
    "\002\001\001\000\004\014\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\102\001\001\000\010\013\075\021\074\025\072" +
    "\001\001\000\010\011\023\015\024\016\021\001\001\000" +
    "\002\001\001\000\024\002\040\003\025\004\030\007\032" +
    "\017\041\020\027\022\036\023\033\024\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\046\004\030\007\032\020\027\022\036\023" +
    "\033\024\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\043\003" +
    "\025\004\030\007\032\020\027\022\036\023\033\024\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\027" +
    "\022\036\023\061\001\001\000\010\020\027\022\036\023" +
    "\060\001\001\000\010\020\027\022\036\023\057\001\001" +
    "\000\010\020\027\022\036\023\056\001\001\000\010\020" +
    "\027\022\036\023\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\077\025\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }


    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sql_start ::= select_stmt SEMI 
            {
              SQLNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode a = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      SQLNode node = new SQLNode(a);
                      //System.out.println("ConfirmDist" + node.distinct);
                      //System.out.println("ConfirmSelect" + node.columns.get(0).name);
                      //System.out.println("ConfirmFrom" + node.relations.get(0));

                      //System.out.println("ConfirmWhere" + node.whereNodes.get(0));
                      RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_start",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sql_start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode start_val = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // select_stmt ::= SELECT opt_distinct select_list from_clause opt_where_clause 
            {
              SQLNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Column> b = (ArrayList<Column>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String[]> c = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<WhereNode> d = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        SQLNode node = new SQLNode();
                        //System.out.println("distinct"+a);
                        node.distinct = a;
                        //System.out.println("select"+b);
                        node.columns = b;
                        //System.out.println("from"+c);
                        node.relations = c;
                        //System.out.println("where"+d);
                        node.whereNodes = d;
                        RESULT = node;
                        //System.out.println("Select Statement Marked.");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_distinct ::= empty 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_distinct",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_distinct ::= DISTINCT 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_distinct",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // select_list ::= select_list COMMA column_ref 
            {
              ArrayList<Column> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Column> a = (ArrayList<Column>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<Column> columns = new ArrayList();
                        Column single = new Column();
                        if(!b[0].equals("")){single.prefix = b[0];}
                        single.name = b[1];
                        columns.addAll(a);   //Assuming recursion doesn't bite me in the a**, this will work right.
                        columns.add(single);
                        RESULT = columns;
                        //System.out.println("SL,CR Marked.");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select_list ::= column_ref 
            {
              ArrayList<Column> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<Column> columns = new ArrayList();
                        Column single = new Column();
                        if(!b[0].equals("")){single.prefix = b[0];}
                        single.name = b[1];
                        columns.add(single);
                        RESULT = columns;
                        //System.out.println(b[0] + " :CR Marked.: " + b[1]);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // column_ref ::= NAME 
            {
              String[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        //System.out.println(b + " Name Marked.");
                        String[] column = new String[2];
                        column[0] = "";
                        column[1] = b;
                        //System.out.println("Col0="+column[0]);
                        //System.out.println("Col1="+column[1]);
                        RESULT = column;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // column_ref ::= NAME PERIOD NAME 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] column = new String[2];
                        column[0] = a;
                        //System.out.println("Col0="+column[0]);
                        column[1] = b;
                        //System.out.println("Col1="+column[1]);
                        RESULT = column;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // from_clause ::= FROM table_ref_commalist 
            {
              ArrayList<String[]> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String[]> a = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // table_ref_commalist ::= table_ref_commalist COMMA table_ref 
            {
              ArrayList<String[]> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String[]> a = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<String[]> relations = new ArrayList();
                        relations.addAll(a);
                        relations.add(b);
                        RESULT = relations;
                        //System.out.println("TRC,TR Marked.");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_commalist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // table_ref_commalist ::= table_ref 
            {
              ArrayList<String[]> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<String[]> relations = new ArrayList();
                        relations.add(b);
                        RESULT = relations;
                        //System.out.println("TR Marked.");
                        //System.out.println(b[0] +":"+b[1]);
                        //System.out.println("TR"+ relations.get(0));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_commalist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // table_ref ::= table 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] relation = new String[2];
                        relation[0] = a;
                        relation[1] = "";
                        RESULT = relation;
                        //System.out.println("Table Marked.");
                        //System.out.println(a);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // table_ref ::= table range_variable 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] relation = new String[2];
                        relation[0] = a;
                        relation[1] = b;
                        RESULT = relation;
                        //System.out.println("Table Range Marked.");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // table ::= NAME 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // range_variable ::= NAME 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range_variable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opt_where_clause ::= empty 
            {
              ArrayList<WhereNode> RESULT =null;
		
                        ArrayList<WhereNode> emptynode = new ArrayList();
                        RESULT = emptynode;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_where_clause",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opt_where_clause ::= where_clause 
            {
              ArrayList<WhereNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<WhereNode> a = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_where_clause",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // where_clause ::= WHERE search_condition 
            {
              ArrayList<WhereNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<WhereNode> a = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // search_condition ::= search_condition AND predicate 
            {
              ArrayList<WhereNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<WhereNode> a = (ArrayList<WhereNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode b = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<WhereNode> in_nodes = new ArrayList();
                        in_nodes.addAll(a);   //Assuming recursion doesn't bite me in the a**, this will work right.
                        in_nodes.add(b);
                        RESULT = in_nodes;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("search_condition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // search_condition ::= predicate 
            {
              ArrayList<WhereNode> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode b = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ArrayList<WhereNode> in_nodes = new ArrayList();
                        in_nodes.add(b);
                        RESULT = in_nodes;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("search_condition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // predicate ::= pred 
            {
              WhereNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode a = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // predicate ::= NOT pred 
            {
              WhereNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode a = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        a.negated = Boolean.TRUE;
                        RESULT = a;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pred ::= comparison_pred 
            {
              WhereNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        WhereNode in_node = new WhereNode();
                        in_node.leftOperandType = a[0]; //type1
                        in_node.leftOperandPrefix = a[1]; //pre1
                        in_node.leftOperandName = a[2]; //name1
                        in_node.leftOperandValue = a[3]; //value1
                        in_node.comparison = a[4];  //compare
                        in_node.rightOperandType = a[5]; //type2
                        in_node.rightOperandPrefix = a[6]; //pre2
                        in_node.rightOperandName = a[7]; //name2
                        in_node.rightOperandValue = a[8]; //val2
                        RESULT = in_node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pred",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pred ::= in_pred 
            {
              WhereNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhereNode a = (WhereNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = a;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pred",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pred ::= exists_pred 
            {
              WhereNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLNode a = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        WhereNode in_node = new WhereNode();
                        in_node.nested = Boolean.TRUE;
                        in_node.nestingType = "exists";
                        in_node.subQuery = a;
                        RESULT = in_node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pred",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comparison_pred ::= scalar_exp EQUALS scalar_exp 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] comparepred = new String[9];
                        comparepred[0] = a[0]; //type1
                        comparepred[1] = a[1]; //pre1
                        comparepred[2] = a[2]; //name1
                        comparepred[3] = a[3]; //val1
                        comparepred[4] = "=";  //compare
                        comparepred[5] = b[0]; //type2
                        comparepred[6] = b[1]; //pre2
                        comparepred[7] = b[2]; //name2
                        comparepred[8] = b[3]; //val2
                        RESULT= comparepred;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_pred",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comparison_pred ::= scalar_exp GREATER scalar_exp 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] comparepred = new String[9];
                        comparepred[0] = a[0]; //type1
                        comparepred[1] = a[1]; //pre1
                        comparepred[2] = a[2]; //name1
                        comparepred[3] = a[3]; //val1
                        comparepred[4] = ">";  //compare
                        comparepred[5] = b[0]; //type2
                        comparepred[6] = b[1]; //pre2
                        comparepred[7] = b[2]; //name2
                        comparepred[8] = b[3]; //val2
                        RESULT= comparepred;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_pred",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparison_pred ::= scalar_exp LESSER scalar_exp 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] comparepred = new String[9];
                        comparepred[0] = a[0]; //type1
                        comparepred[1] = a[1]; //pre1
                        comparepred[2] = a[2]; //name1
                        comparepred[3] = a[3]; //val1
                        comparepred[4] = "<";  //compare
                        comparepred[5] = b[0]; //type2
                        comparepred[6] = b[1]; //pre2
                        comparepred[7] = b[2]; //name2
                        comparepred[8] = b[3]; //val2
                        RESULT= comparepred;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_pred",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparison_pred ::= scalar_exp EQGREATER scalar_exp 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] comparepred = new String[9];
                        comparepred[0] = a[0]; //type1
                        comparepred[1] = a[1]; //pre1
                        comparepred[2] = a[2]; //name1
                        comparepred[3] = a[3]; //val1
                        comparepred[4] = ">="; //compare
                        comparepred[5] = b[0]; //type2
                        comparepred[6] = b[1]; //pre2
                        comparepred[7] = b[2]; //name2
                        comparepred[8] = b[3]; //val2
                        RESULT= comparepred;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_pred",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparison_pred ::= scalar_exp EQLESSER scalar_exp 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] comparepred = new String[9];
                        comparepred[0] = a[0]; //type1
                        comparepred[1] = a[1]; //pre1
                        comparepred[2] = a[2]; //name1
                        comparepred[3] = a[3]; //val1
                        comparepred[4] = "<=";  //compare
                        comparepred[5] = b[0]; //type2
                        comparepred[6] = b[1]; //pre2
                        comparepred[7] = b[2]; //name2
                        comparepred[8] = b[3]; //val2
                        RESULT= comparepred;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_pred",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // scalar_exp ::= literal 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] scalarexp = new String[4];
                        scalarexp[0] = a[0];    //type
                        scalarexp[1] = "";
                        scalarexp[2] = "";
                        scalarexp[3] = a[1];    //val
                        RESULT = scalarexp;
                        //for(String el:scalarexp) {System.out.print(el+",");}
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // scalar_exp ::= column_ref 
            {
              String[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] b = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] scalarexp = new String[4];
                        scalarexp[0] = "col";   //type
                        scalarexp[1] = b[0];    //prefix
                        scalarexp[2] = b[1];    //name
                        scalarexp[3] = "";
                        RESULT = scalarexp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= APOST NAME APOST 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        String[] lit = new String[2];
                        lit[0] = "str"; //TYPE
                        lit[1] = a;   //VALUE
                        RESULT = lit;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= INTNUM 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] lit = new String[2];
                        lit[0] = "num"; //TYPE
                        lit[1] = a;   //VALUE
                        //System.out.println(a + "=Number");
                        RESULT = lit;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= INTNUM PERIOD INTNUM 
            {
              String[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] lit = new String[2];
                        lit[0] = "num"; //TYPE
                        lit[1] = a + "." + b;   //VALUE
                        //System.out.println(a + "=Number");
                        RESULT = lit;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // in_pred ::= scalar_exp IN LPAREN select_stmt RPAREN 
            {
              WhereNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String[] a = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode b = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        WhereNode in_node = new WhereNode();
                        in_node.nested = Boolean.TRUE;
                        in_node.nestingType = "in";
                        in_node.subQuery = b;
                        in_node.leftOperandType = a[0]; //type1
                        in_node.leftOperandPrefix = a[1]; //pre1
                        in_node.leftOperandName = a[2]; //name1
                        in_node.leftOperandValue = a[3]; //value1
                        RESULT = in_node;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_pred",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exists_pred ::= EXISTS LPAREN select_stmt RPAREN 
            {
              SQLNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SQLNode a = (SQLNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_pred",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // empty ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
